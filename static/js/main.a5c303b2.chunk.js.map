{"version":3,"sources":["components/SignIn/SignIn.js","components/Register/Register.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","encryptResult","onSignInButtonPressed","onPlainTextChange","onEnKeyChange","className","id","htmlFor","onChange","type","name","defaultValue","onClick","Register","decryptResult","onRegisterButtonPressed","onDecKeyChange","onCipherTextChange","style","borderRadius","background","boxShadow","zIndex","Navbar","route","onRouteChange","aesjs","require","pbkdf2","App","a","tmp","state","setState","signinPass","signinUsername","navbarColor","plaintext","enKey","key","pbkdf2Sync","text","textBytes","utils","utf8","toBytes","encryptedBytes","ModeOfOperation","ctr","Counter","encrypt","encryptedHex","hex","fromBytes","hex2a","enResultHex","target","value","onDecryptButtonPressed","decKey","ciphertext","cipherHex","a2hex","length","decryptedBytes","decrypt","decryptedText","document","title","hexx","toString","str","i","String","fromCharCode","parseInt","substr","arr","l","Number","charCodeAt","push","join","this","params","particles","number","density","enable","value_area","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5c303b2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SignIn.css'\r\n\r\nexport default function SignIn({ encryptResult, onSignInButtonPressed, onPlainTextChange, onEnKeyChange }) {\r\n    return (\r\n        <div className=\"center fullscreen\">\r\n            <article className=\"stack pa4 black-80 neumorphism\">\r\n                <fieldset id=\"sign_up\" className=\"dtc tc text-center ba b--transparent ph0 mh0\">\r\n                    <h1 >AES-Encrypt</h1>\r\n                    <legend className=\"ph0 mh0 fw6 clip\">Sign Up</legend>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw4 lh-copy f6\" htmlFor=\"email-address\">Plaintext</label>\r\n                        <input onChange={onPlainTextChange} className=\"pa2 input-reset ba white br2  bg-transparent w-100 measure\" type=\"text\" name=\"username\" id=\"username\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw4 lh-copy f6\" htmlFor=\"password\">Key</label>\r\n                        <input onChange={onEnKeyChange} className=\"b pa2 input-reset ba white br2 bg-transparent\" type=\"text\" name=\"password\" id=\"password\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw4 lh-copy f6\" htmlFor=\"result\">Result</label>\r\n                        <input defaultValue={encryptResult} className=\"b pa2 input-reset ba white br2 bg-transparent\" type=\"text\" name=\"result\" id=\"result\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <button onClick={onSignInButtonPressed} className=\"b br2 ph3 pv2 input-reset ba b--white bg-transparent grow pointer f6\"  >Encrypt</button>\r\n                    </div>\r\n                </fieldset>\r\n            </article>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../SignIn/SignIn'\r\nimport '../Register/register.css'\r\n\r\nexport default function Register({ decryptResult, onRegisterButtonPressed, onDecKeyChange, onCipherTextChange }) {\r\n    // const userData = { name: '', username: '', email: '', password: '' }\r\n    // const onUsernameChange = (event) => userData.username = userData.name = event.target.value;\r\n\r\n    // const onEmailChange = (event) => userData.email = event.target.value;\r\n    // const onPasswordChange = (event) => userData.password = event.target.value;\r\n    const button = () => onRegisterButtonPressed();\r\n\r\n\r\n    return (\r\n        <div className=\"center fullscreen\" >\r\n            <article className=\"pa4 black-80 \" style={{\r\n                borderRadius: '50px',\r\n                background: '#76b4de',\r\n                boxShadow: 'inset 20px 20px 60px #6499bd, inset -20px -20px 60px #88cfff',\r\n                zIndex: '100'\r\n\r\n            }} >\r\n                <fieldset id=\"sign_up\" className=\"dtc tc text-center ba b--transparent ph0 mh0\">\r\n                    <h1>AES-Decrypt</h1>\r\n                    <legend className=\"ph0 mh0 fw6 clip\">Sign Up</legend>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw4 lh-copy f6\" htmlFor=\"email-address\">Cipher Text</label>\r\n                        <input onChange={onCipherTextChange} className=\"pa2 input-reset ba bg-transparent w-100 measure br2 white bw1\" type=\"text\" name=\"username\" id=\"username\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw4 lh-copy f6\" htmlFor=\"email-address\">Key</label>\r\n                        <input onChange={onDecKeyChange} className=\"pa2 input-reset ba bg-transparent w-100 measure br2 white bw1\" type=\"email\" name=\"email\" id=\"email\" />\r\n                    </div>\r\n                    <div className=\"mt3\">\r\n                        <label className=\"db fw4 lh-copy f6\" htmlFor=\"password\">Result</label>\r\n                        <input defaultValue={decryptResult} className=\"b pa2 input-reset ba bg-transparent br2 white bw1\" type=\"text\" name=\"password\" id=\"password\" />\r\n                    </div>\r\n                    <div className=\"mt3\"><button onClick={button} className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 br2 \"  >Decrypt</button></div>\r\n                </fieldset>\r\n            </article>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../Navbar/Navbar.css'\r\n\r\nexport default function Navbar({ route, onRouteChange }) {\r\n    return (\r\n        <div className=\" navbar fw9 white tc v-btm  pb5\"  >\r\n\r\n            {route === 'signin'\r\n                ? <p onClick={onRouteChange} className=\"dib underline grow mr4 f1 pointer\">Decrypt</p>\r\n                : <p onClick={onRouteChange} className=\"dib black underline grow mr4 f1 pointer\">Encrypt</p>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css'; import 'tachyons';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Particles from 'react-particles-js';\nimport Navbar from './components/Navbar/Navbar'\nconst aesjs = require(\"aes-js\");\nconst pbkdf2 = require(\"pbkdf2\");\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      route: 'signin',\n      navbarColor: 'bgblue',\n      enKey: '',\n      plaintext: '',\n      encryptResult: '',\n      decryptResult: '',\n      decKey: '',\n      ciphertext: '',\n      enResultHex: '',\n    }\n  }\n\n  componentDidMount() {\n    document.title = \"Dwiki - Fauzi\"\n  }\n\n  onRouteChange = async () => {\n    const tmp = this.state.route === 'signin'\n      ? 'register'\n      : this.state.route === 'register'\n        ? 'signin'\n        : this.state.route === 'home' ? 'signin' : 'home';\n    await this.setState({\n      route: tmp\n    })\n\n    if (tmp === 'signin') {\n      await this.setState({\n        signinPass: '', signinUsername: ''\n      })\n    }\n\n    if (tmp === 'signin') {\n      await this.setState({\n        navbarColor: 'bgblue'\n      })\n    } else {\n      await this.setState({\n        navbarColor: 'bgred'\n      })\n    }\n\n  }\n\n  onSignInButtonPressed = () => {\n    const { plaintext, enKey } = this.state\n    // An example 128-bit key (16 bytes * 8 bits/byte = 128 bits)\n    var key = pbkdf2.pbkdf2Sync(enKey, 'salt', 1, 128 / 8, 'sha512');\n\n    // Convert text to bytes\n    var text = plaintext;\n    var textBytes = aesjs.utils.utf8.toBytes(text);\n\n    // The counter is optional, and if omitted will begin at 1\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\n    var encryptedBytes = aesCtr.encrypt(textBytes);\n\n    // To print or store the binary data, you may convert it to hex\n    var encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);\n\n    this.setState({\n      encryptResult: this.hex2a(encryptedHex),\n      enResultHex: encryptedHex\n    });\n\n  }\n\n\n  onPlainTextChange = async (text) => {\n    await this.setState({\n      plaintext: text.target.value\n    });\n\n    this.onSignInButtonPressed();\n  }\n  onEnKeyChange = async (key) => {\n    await this.setState({\n      enKey: key.target.value\n    });\n    this.onSignInButtonPressed();\n  }\n\n\n  onDecryptButtonPressed = () => {\n    const { enResultHex, decKey, ciphertext } = this.state;\n    var cipherHex = this.a2hex(ciphertext);\n    cipherHex = cipherHex.length < enResultHex ? enResultHex : cipherHex;\n\n    var encryptedBytes = aesjs.utils.hex.toBytes(cipherHex);\n    var key = pbkdf2.pbkdf2Sync(decKey, 'salt', 1, 128 / 8, 'sha512');\n    // The counter mode of operation maintains internal state, so to\n    // decrypt a new instance must be instantiated.\n    var aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));\n    var decryptedBytes = aesCtr.decrypt(encryptedBytes);\n\n    // Convert our bytes back into text\n    var decryptedText = aesjs.utils.utf8.fromBytes(decryptedBytes);\n    this.setState({\n      decryptResult: decryptedText\n    })\n  }\n\n  onCipherTextChange = async (text) => {\n    await this.setState({\n      ciphertext: text.target.value\n    });\n    this.onDecryptButtonPressed();\n  }\n  onDecKeyChange = async (text) => {\n    await this.setState({\n      decKey: text.target.value\n    });\n    this.onDecryptButtonPressed();\n  }\n\n  hex2a(hexx) {\n    var hex = hexx.toString();//force conversion\n    var str = '';\n    for (var i = 0; i < hex.length; i += 2)\n      str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    return str;\n  }\n  a2hex(str) {\n    var arr = [];\n    for (var i = 0, l = str.length; i < l; i++) {\n      var hex = Number(str.charCodeAt(i)).toString(16);\n      arr.push(hex);\n    }\n    return arr.join('');\n  }\n\n\n\n  render() {\n    const { route, navbarColor, decryptResult } = this.state\n    const particlesParam = {\n      particles: {\n        number: {\n          value: 150,\n          density: {\n            enable: true,\n            value_area: 800\n          }\n        }\n      }\n    }\n\n    return (\n      <div className={navbarColor}>\n        <Particles className=\"particles\" params={particlesParam} />\n        <Navbar onRouteChange={this.onRouteChange} color={navbarColor} route={route} />\n        {route === 'signin' ?\n          <SignIn\n            onSignInButtonPressed={this.onSignInButtonPressed}\n            onPlainTextChange={this.onPlainTextChange}\n            onEnKeyChange={this.onEnKeyChange}\n            encryptResult={this.state.encryptResult}\n          /> :\n          <Register\n            onRegisterButtonPressed={this.onDecryptButtonPressed}\n            onCipherTextChange={this.onCipherTextChange}\n            onDecKeyChange={this.onDecKeyChange}\n            decryptResult={decryptResult}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}